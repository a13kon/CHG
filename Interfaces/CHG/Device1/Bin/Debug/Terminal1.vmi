VM_JSR _Move_DOWN_
VM_WORD_DIR 65535
VM_JSR _Move_UP_
VM_WORD_DIR 65535
VM_JSR _BoolSwap_
VM_WORD_DIR 65535
VM_JSR _SetCurrentValue_
VM_WORD_DIR 65535
VM_JSR _Increment_BYTE_
VM_WORD_DIR 65535
VM_JSR _Decrement_BYTE_
VM_WORD_DIR 65535
VM_JSR _Increment_WORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_WORD_
VM_WORD_DIR 65535
VM_JSR _Increment_DWORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_DWORD_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_1_
VM_WORD_DIR 65535
VM_JSR _TIMED_LOOP_
VM_WORD_DIR 65535
VM_JSR _Lang_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_DOWN_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_UP_
VM_WORD_DIR 65535
VM_JSR _ResetSingleAlarm_
VM_WORD_DIR 65535
VM_JSR _ResetGlobalAlarm_
VM_WORD_DIR 65535
VM_JSR _gotoAlarmLog_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_DOWN_
VM_WORD_DIR 65535
VM_JSR _DeleteAlarmLog_
VM_WORD_DIR 65535
VM_JSR _QuickMenuUP_
VM_WORD_DIR 65535
VM_JSR _QuickMenuDOWN_
VM_WORD_DIR 65535
VM_JSR _QuickMenuENT_
VM_WORD_DIR 65535
VM_JSR _GotoMainMenu_
VM_WORD_DIR 65535
VM_JSR _SelMainMenu_
VM_WORD_DIR 65535
VM_JSR _GotoMain_
VM_WORD_DIR 65535
VM_JSR _SelSettingsMenu_
VM_WORD_DIR 65535
VM_JSR _GlobalEsc_
VM_WORD_DIR 65535
VM_JSR _ScrollMenuDown_
VM_WORD_DIR 65535
VM_JSR _ScrollMenuUp_
VM_WORD_DIR 65535
VM_JSR _PwdLogIn_
VM_WORD_DIR 65535
VM_JSR _PwdLogOut_
VM_WORD_DIR 65535
VM_JSR _ChgPwd_
VM_WORD_DIR 65535
VM_JSR _DummyService_
VM_WORD_DIR 65535
VM_JSR _DummyManuf_
VM_WORD_DIR 65535
VM_JSR _EscDummyService_
VM_WORD_DIR 65535
VM_JSR _EscDummyManuf_
VM_WORD_DIR 65535
VM_JSR _IncrDig_
VM_WORD_DIR 65535
VM_JSR _DecrDig_
VM_WORD_DIR 65535
VM_JSR _EnDateChg_
VM_WORD_DIR 65535
VM_JSR _DFUp_
VM_WORD_DIR 65535
VM_JSR _DFDown_
VM_WORD_DIR 65535
VM_JSR _OnOffSwitch_
VM_WORD_DIR 65535
VM_JSR _DoNothing_
VM_WORD_DIR 65535
VM_JSR _IPCFG_Reboot_ESC_
VM_WORD_DIR 65535
VM_JSR _IPCFG_Reboot_ENTER_
VM_WORD_DIR 65535
VM_JSR _IPCFG_Err_ESC_
VM_WORD_DIR 65535
VM_JSR _IPCFG_Settings_ESC_
VM_WORD_DIR 65535
VM_JSR _Down_InfoPage_
VM_WORD_DIR 65535
VM_JSR _Up_InfoPage_
VM_WORD_DIR 65535
VM_JSR _EscInfo_
VM_WORD_DIR 65535
VM_JSR _RowDown_
VM_WORD_DIR 65535
VM_JSR _RowUp_
VM_WORD_DIR 65535
VM_JSR _RowEdit_
VM_WORD_DIR 65535
VM_JSR _RowSwap_
VM_WORD_DIR 65535
VM_JSR _Control_Down_
VM_WORD_DIR 65535
VM_JSR _Control_Up_
VM_WORD_DIR 65535
VM_JSR _ResetTO_
VM_WORD_DIR 65535
VM_JSR _SetCurrentValueReset_
VM_WORD_DIR 65535
VM_JSR _GoToControl_
VM_WORD_DIR 65535
VM_JSR ___INIT___
VM_WORD_DIR 65535

DCL BOOL X dummy
DCL INT X BarPos
DCL INT X IdxMenuMsk
DCL INT X CurrItemNo
DCL INT X IdxImg1
DCL INT X IdxImg2
DCL INT X IdxImg3
DCL INT X MenuItemsNo
DCL UINT X PwdIn
DCL INT X PwdRes
DCL BOOL X EnLogOut
DCL BOOL X EnPwdChgU
DCL BOOL X EnPwdChgS
DCL BOOL X EnPwdChgM
DCL INT X PwdTyp
DCL INT X PwdTypMenu
DCL INT X IdxImgQM
DCL INT X LangTime
DCL BOOL X EnDDMMYY
DCL BOOL X EnMMDDYY
DCL BOOL X EnYYMMDD
DCL DINT X AlrmIdx
DCL DINT X AlrmCode
DCL DINT X AlrmLogsIdx
DCL DINT X AlrmLogCode
DCL USINT X AlrmLogEventType
DCL BOOL X AlrmLogDelete
DCL BYTE X __SYSVA_TMP_VALUE
DCL INT X __SYSVA_KEY_COUNTER
DCL WORD X __SYSVA_TMP_VALUE
DCL DWORD X __SYSVA_TMP_VALUE
DCL REAL X __SYSVA_TMP_VALUE
DCL BOOL X GeneralMng.DefDone
DCL BOOL EF EnEndDef
DCL BOOL X GeneralMng.EndDefMsk
DCL BOOL EF EnCarelLogo
DCL BOOL X GeneralMng.VerMismatch
DCL BOOL X StartupJmp
DCL DINT X N_Alrms
DCL DINT EF N_Alrms_Prev
DCL BOOL X GeneralMng.RESERVED3
DCL USINT X __SYSVA_MANUAL_BUZZER_ON
DCL USINT X __SYSVA_MANUAL_BUZZER_OFF
DCL BOOL X Buzzer
DCL BOOL EF EnCheckAlarm
DCL DINT X GeneralMng.ID_Lang
DCL BOOL EF EnLangChg
DCL BOOL EF EnStartup
DCL INT EF MaskPos
DCL INT EF DTQM
DCL INT EF QUICK_MENU_ITEMS_NO
DCL USINT X __SYSVA_KEY_PRESSED
DCL INT EF DTRetMain
DCL INT EF MAIN_MENU_ITEMS_NO
DCL INT X GeneralMng.DateFormat
DCL UINT X GeneralMng.Day
DCL UINT EF Date1
DCL UINT X GeneralMng.Month
DCL UINT EF Date2
DCL UINT X GeneralMng.Year
DCL UINT EF Date3
DCL INT EF CntDwnPwdTypMenu
DCL BOOL EF En_CheckAlrm_Reset
DCL DINT X AlarmMng.AlrmTime
DCL REAL EF AlrmStoredVarReal1
DCL BOOL EF EnStoredVar1_REAL
DCL REAL EF AlrmStoredVarReal2
DCL BOOL EF EnStoredVar2_REAL
DCL BOOL X AlarmMng.AlrmResByPGD1
DCL UDINT EF UoM_Index_Old
DCL UDINT X STD_UOM_ZONE_UI
DCL DINT EF UoM_Change_result
DCL REAL X GeneralMng.BoardTemp_Msk
DCL REAL EF BoardTempMsk
DCL UDINT X GeneralMng.BoardTyp[1]
DCL BOOL EF ShowTemp
DCL UDINT X GeneralMng.SerialNumber[1]
DCL USINT EF UID_1
DCL USINT EF UID_2
DCL USINT EF UID_3
DCL USINT EF UID_4
DCL UDINT X GeneralMng.SerialNumber[2]
DCL USINT EF UID_5
DCL USINT EF UID_6
DCL USINT EF UID_7
DCL USINT EF UID_8
DCL BOOL EF EnVerMismatch
DCL BOOL X AlarmLogReset
DCL DINT X IPCfgMng.GenNetCfg.SysErr
DCL BOOL X IPCfgMng.GenNetCfg.ShowErr
DCL INT X IPCfgMng.GenNetCfg.EnReboot
DCL USINT X IPCfgMng.GenNetCfg.ErrorSignalCnt
DCL BOOL X IPCfgMng.pGDXCfg.EnPGDX
DCL USINT EF TimeIntervalCheckLangTimezone
DCL BOOL EF KeyAlarmAutorepeatActive
DCL DINT EF AlrmLogsTot
DCL DINT X AlarmMng.AlrmLogTime
DCL DINT EF infoLogOk
DCL DINT EF LastValidRecord
DCL DINT EF AlrmLogsIdxTemp
DCL DINT EF AlrmLogInfoErr
DCL DINT EF AlrmLogCodeTemp
DCL USINT EF AlrmLogEventTypeTemp
DCL DINT EF AlrmLogTimeTemp
DCL INT EF IdxQM
DCL INT EF IncrTmp
DCL BOOL X BrowserAuth.DisableUI_Pwd
DCL DINT X CurrentRow
DCL DINT X RowNumber
DCL DINT X old_PageControl
DCL DINT X PageControl
DCL INT EF IdxMenuMskTmp
DCL INT EF BarPosTmp
DCL INT EF CurrItemNoTmp
DCL INT EF IdxImg1Tmp
DCL INT EF IdxImg2Tmp
DCL INT EF IdxImg3Tmp
DCL INT EF SETTINGS_MENU_ITEMS_NO
DCL UINT X GeneralMng.Second
DCL UINT X GeneralMng.SecondIn
DCL UINT X GeneralMng.Minute
DCL UINT X GeneralMng.MinuteIn
DCL UINT X GeneralMng.Hour
DCL UINT X GeneralMng.HourIn
DCL UINT X GeneralMng.DayIn
DCL UINT X GeneralMng.MonthIn
DCL UINT X GeneralMng.YearIn
DCL UINT X PwdUser
DCL UINT X PwdService
DCL UINT X RESERVED1
DCL UINT X GeneralMng.RESERVED2
DCL UDINT X __SYSVA_TMP_VALUE
DCL BOOL X GeneralMng.WritePwd
DCL BOOL X GeneralMng.En_Date
DCL BOOL X OnOffUnitMng.KeybOnOff
DCL BOOL X IPCfgMng.GenNetCfg.ResetTimerInactivity
DCL DINT X Mask_Mng.Info_Page
DCL BYTE X TotalChill
DCL BOOL X EditRow
DCL BOOL X Mask_Mng.ResetTO

; Move_DOWN()
VM_FUNCTION _Move_DOWN_
VM_DATA 0
EF_NEXT_MASK
VM_RTS

; Move_UP()
VM_FUNCTION _Move_UP_
VM_DATA 0
EF_PREVIOUS_MASK
VM_RTS

; BoolSwap()
VM_FUNCTION _BoolSwap_
VM_DATA 0
EF_SWAP
VM_RTS

; SetCurrentValue()
VM_FUNCTION _SetCurrentValue_
VM_DATA 0
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; Increment_BYTE()
VM_FUNCTION _Increment_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_ADD BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_BYTE()
VM_FUNCTION _Decrement_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_SUB BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_WORD()
VM_FUNCTION _Increment_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_ADD WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_WORD()
VM_FUNCTION _Decrement_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_SUB WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_DWORD()
VM_FUNCTION _Increment_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_ADD DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_DWORD()
VM_FUNCTION _Decrement_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_SUB DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_0()
VM_FUNCTION _Increment_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_0()
VM_FUNCTION _Decrement_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_1()
VM_FUNCTION _Increment_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_1()
VM_FUNCTION _Decrement_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; InstDef()
VM_FUNCTION _InstDef_
VM_DATA 0
; IF
VM_PUSH BOOL X GeneralMng.DefDone
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L1
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnEndDef
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L1
VM_JZ L0
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnEndDef
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK EndDefault
VM_LABEL L0
; END_IF
; IF
VM_PUSH BOOL X GeneralMng.EndDefMsk
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L3
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnCarelLogo
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L3
VM_DUP BOOL
VM_JZ L4
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnEndDef
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L4
VM_JZ L2
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCarelLogo
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK CarelLogo
VM_LABEL L2
; END_IF
VM_RTS

; CheckAlarm()
VM_FUNCTION _CheckAlarm_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_GT DINT
VM_JZ L7
; THEN
; IF
VM_PUSH BOOL X GeneralMng.RESERVED3
VM_JZ L8
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Buzzer
VM_LABEL L8
; END_IF
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCheckAlarm
VM_JUMP L9
VM_LABEL L7
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L11
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_LABEL L11
VM_JZ L10
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Buzzer
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_LABEL L10
; END_IF
VM_LABEL L9
VM_PUSH DINT X N_Alrms
VM_POP DINT EF N_Alrms_Prev
VM_RTS

; CarelLogo()
VM_FUNCTION _CarelLogo_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT -1
VM_CMP_EQ DINT
VM_JZ L12
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng.ID_Lang
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnLangChg
EF_GOTO_MASK Language
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStartup
VM_LABEL L12
; END_IF
; IF
VM_PUSH BOOL EF EnStartup
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L13
; THEN
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStartup
EF_GOTO_MASK Main
VM_LABEL L13
; END_IF
VM_RTS

; GotoMain()
VM_FUNCTION _GotoMain_
VM_DATA 0
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnLangChg
EF_GOTO_MASK Main
VM_RTS

; ShowLangMskTime()
VM_FUNCTION _ShowLangMskTime_
VM_DATA 0
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X LangTime
; IF
VM_PUSH INT X LangTime
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L15
VM_POP_AWAY BOOL
VM_PUSH BOOL X GeneralMng.VerMismatch
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L15
VM_DUP BOOL
VM_JZ L16
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnLangChg
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L16
VM_JZ L14
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnLangChg
VM_JSR _GotoMain_
VM_LABEL L14
; END_IF
VM_RTS

; BlinkQuickMenu()
VM_FUNCTION _BlinkQuickMenu_
VM_DATA 0
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L18
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_ADD INT
VM_CMP_LT INT
VM_LABEL L18
VM_JZ L17
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_ADD INT
VM_POP INT X IdxImgQM
VM_JUMP L19
VM_LABEL L17
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L21
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_LABEL L21
VM_JZ L20
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L20
; END_IF
VM_LABEL L19
VM_RTS

; RetMainMsk()
VM_FUNCTION _RetMainMsk_
VM_DATA 0
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L22
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTRetMain
VM_PUSH_IMM INT 30
VM_POP INT X LangTime
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
VM_JUMP L23
VM_LABEL L22
; IF
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 300
VM_CMP_EQ INT
VM_JZ L24
; THEN
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_JSR _GotoMain_
VM_LABEL L24
; END_IF
VM_LABEL L23
VM_RTS

; MskDateFormat()
VM_FUNCTION _MskDateFormat_
VM_DATA 0
; CASE
VM_PUSH INT X GeneralMng.DateFormat
; OF
VM_CASE INT 0 L26
VM_CASE INT 1 L27
VM_CASE INT 2 L28
VM_POP_AWAY INT
VM_JUMP L25
VM_LABEL L26
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT EF Date1
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT EF Date2
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT EF Date3
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnDDMMYY
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnMMDDYY
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnYYMMDD
VM_JUMP L25
VM_LABEL L27
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT EF Date1
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT EF Date2
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT EF Date3
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnDDMMYY
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnMMDDYY
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnYYMMDD
VM_JUMP L25
VM_LABEL L28
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT EF Date1
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT EF Date2
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT EF Date3
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnDDMMYY
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnMMDDYY
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnYYMMDD
VM_LABEL L25
VM_RTS

; UsrAccessMenu()
VM_FUNCTION _UsrAccessMenu_
VM_DATA 0
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L29
; THEN
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF CntDwnPwdTypMenu
VM_JUMP L30
VM_LABEL L29
; IF
VM_PUSH INT EF CntDwnPwdTypMenu
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L31
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X PwdTypMenu
VM_LABEL L31
; END_IF
VM_LABEL L30
VM_RTS

; CheckStoredVar_Alrm()
VM_FUNCTION _CheckStoredVar_Alrm_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL EF AlrmStoredVarReal1
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L37
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar1_REAL
VM_JUMP L38
VM_LABEL L37
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar1_REAL
; END_IF
VM_LABEL L38
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL EF AlrmStoredVarReal2
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L40
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar2_REAL
VM_JUMP L41
VM_LABEL L40
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar2_REAL
; END_IF
VM_LABEL L41
VM_RTS

; CheckActiveAlarm()
VM_FUNCTION _CheckActiveAlarm_
VM_DATA 4
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Buzzer
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L36
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POPL DINT 0
VM_JSR _CheckStoredVar_Alrm_
EF_GOTO_MASK Alrms_Active
VM_JUMP L43
VM_LABEL L36
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_LE INT
VM_JZ L45
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L46
VM_LABEL L45
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L47
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_LABEL L47
; END_IF
VM_LABEL L46
; END_IF
VM_LABEL L43
VM_RTS

; CheckAlrm_Reset()
VM_FUNCTION _CheckAlrm_Reset_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_CheckAlrm_Reset
VM_JZ L32
; THEN
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L33
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L34
VM_LABEL L33
; ELSE
VM_JSR _CheckActiveAlarm_
; END_IF
VM_LABEL L34
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L32
; END_IF
VM_RTS

; UIDCalc()
VM_FUNCTION _UIDCalc_
VM_DATA 0
VM_PUSH UDINT X GeneralMng.SerialNumber[1]
VM_PUSH_IMM UDINT 16777216
VM_DIV UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_1
VM_PUSH UDINT X GeneralMng.SerialNumber[1]
VM_PUSH_IMM UDINT 65536
VM_DIV UDINT
VM_PUSH_IMM UDINT 256
VM_MOD UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_2
VM_PUSH UDINT X GeneralMng.SerialNumber[1]
VM_PUSH_IMM UDINT 256
VM_DIV UDINT
VM_PUSH_IMM UDINT 256
VM_MOD UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_3
VM_PUSH UDINT X GeneralMng.SerialNumber[1]
VM_PUSH_IMM UDINT 256
VM_MOD UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_4
VM_PUSH UDINT X GeneralMng.SerialNumber[2]
VM_PUSH_IMM UDINT 16777216
VM_DIV UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_5
VM_PUSH UDINT X GeneralMng.SerialNumber[2]
VM_PUSH_IMM UDINT 65536
VM_DIV UDINT
VM_PUSH_IMM UDINT 256
VM_MOD UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_6
VM_PUSH UDINT X GeneralMng.SerialNumber[2]
VM_PUSH_IMM UDINT 256
VM_DIV UDINT
VM_PUSH_IMM UDINT 256
VM_MOD UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_7
VM_PUSH UDINT X GeneralMng.SerialNumber[2]
VM_PUSH_IMM UDINT 256
VM_MOD UDINT
VM_CAST UDINT USINT
VM_POP USINT EF UID_8
VM_RTS

; CheckVersion()
VM_FUNCTION _CheckVersion_
VM_DATA 0
; IF
VM_PUSH BOOL X GeneralMng.VerMismatch
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L53
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnVerMismatch
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L53
VM_JZ L52
; THEN
EF_GOTO_MASK MemoryErrorMask
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnVerMismatch
VM_LABEL L52
; END_IF
VM_RTS

; DeleteAlarmLogBMS()
VM_FUNCTION _DeleteAlarmLogBMS_
VM_DATA 0
; IF
VM_PUSH BOOL X AlarmLogReset
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L54
; THEN
VM_SYSTEM 43
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL X AlrmLogDelete
VM_PUSH_IMM BOOL 0
VM_POP BOOL X AlarmLogReset
VM_LABEL L54
; END_IF
VM_RTS

; Check_Lang()
VM_FUNCTION _Check_Lang_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 48
VM_CMP_NE DINT
VM_JZ L64
; THEN
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_LABEL L64
; END_IF
VM_RTS

; TIMED_LOOP()
VM_FUNCTION _TIMED_LOOP_
VM_DATA 0
VM_JSR _InstDef_
; IF
VM_PUSH BOOL X GeneralMng.VerMismatch
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_DUP BOOL
VM_JZ L6
VM_POP_AWAY BOOL
VM_PUSH BOOL X StartupJmp
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L6
VM_JZ L5
; THEN
VM_JSR _CheckAlarm_
VM_JSR _CarelLogo_
VM_JSR _ShowLangMskTime_
VM_JSR _BlinkQuickMenu_
VM_JSR _RetMainMsk_
VM_JSR _MskDateFormat_
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTQM
VM_JSR _UsrAccessMenu_
VM_JSR _CheckAlrm_Reset_
; IF
VM_PUSH UDINT EF UoM_Index_Old
VM_PUSH UDINT X STD_UOM_ZONE_UI
VM_CMP_NE UDINT
VM_JZ L48
; THEN
VM_PUSH UDINT X STD_UOM_ZONE_UI
VM_CAST UDINT DINT
VM_SYSTEM 49
VM_POP DINT EF UoM_Change_result
VM_PUSH UDINT X STD_UOM_ZONE_UI
VM_POP UDINT EF UoM_Index_Old
VM_LABEL L48
; END_IF
VM_LABEL L5
; END_IF
VM_PUSH_IMM DINT 1
VM_PUSH_IMM UDINT 300
VM_SYSTEM 46
VM_POP_AWAY DINT
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTRetMain
VM_PUSH REAL X GeneralMng.BoardTemp_Msk
VM_POP REAL EF BoardTempMsk
; IF
VM_PUSH UDINT X GeneralMng.BoardTyp[1]
VM_PUSH_IMM UDINT 12
VM_CMP_EQ UDINT
VM_JZ L49
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF ShowTemp
VM_JUMP L50
VM_LABEL L49
; IF
VM_PUSH UDINT X GeneralMng.BoardTyp[1]
VM_PUSH_IMM UDINT 12
VM_CMP_NE UDINT
VM_JZ L51
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF ShowTemp
VM_LABEL L51
; END_IF
VM_LABEL L50
VM_JSR _UIDCalc_
VM_JSR _CheckVersion_
VM_JSR _DeleteAlarmLogBMS_
; IF
VM_PUSH DINT X IPCfgMng.GenNetCfg.SysErr
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_DUP BOOL
VM_JZ L56
VM_POP_AWAY BOOL
VM_PUSH BOOL X IPCfgMng.GenNetCfg.ShowErr
VM_NOT BOOL
VM_LABEL L56
VM_DUP BOOL
VM_JZ L57
VM_POP_AWAY BOOL
VM_PUSH DINT X IPCfgMng.GenNetCfg.SysErr
VM_PUSH_IMM DINT 150
VM_CMP_NE DINT
VM_LABEL L57
VM_JZ L55
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X IPCfgMng.GenNetCfg.EnReboot
VM_PUSH_IMM BOOL 1
VM_POP BOOL X IPCfgMng.GenNetCfg.ShowErr
VM_PUSH_IMM USINT 0
VM_POP USINT X IPCfgMng.GenNetCfg.ErrorSignalCnt
; IF
VM_PUSH BOOL X IPCfgMng.pGDXCfg.EnPGDX
VM_NOT BOOL
VM_JZ L58
; THEN
EF_GOTO_MASK ErrorIPCfg
VM_LABEL L58
; END_IF
VM_LABEL L55
; END_IF
; IF
VM_PUSH INT X IPCfgMng.GenNetCfg.EnReboot
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L60
VM_POP_AWAY BOOL
VM_PUSH DINT X IPCfgMng.GenNetCfg.SysErr
VM_PUSH_IMM DINT 150
VM_CMP_NE DINT
VM_LABEL L60
VM_DUP BOOL
VM_JZ L61
VM_POP_AWAY BOOL
VM_PUSH DINT X IPCfgMng.GenNetCfg.SysErr
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L61
VM_JZ L59
; THEN
; IF
VM_PUSH USINT X IPCfgMng.GenNetCfg.ErrorSignalCnt
VM_PUSH_IMM USINT 1
VM_CMP_GE USINT
VM_JZ L62
; THEN
EF_GOTO_MASK RebootingIPCfg
VM_PUSH_IMM USINT 0
VM_POP USINT X IPCfgMng.GenNetCfg.ErrorSignalCnt
VM_LABEL L62
; END_IF
VM_PUSH USINT X IPCfgMng.GenNetCfg.ErrorSignalCnt
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X IPCfgMng.GenNetCfg.ErrorSignalCnt
VM_LABEL L59
; END_IF
; IF
VM_PUSH USINT EF TimeIntervalCheckLangTimezone
VM_PUSH_IMM USINT 15
VM_CMP_GE USINT
VM_JZ L63
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT EF TimeIntervalCheckLangTimezone
VM_JSR _Check_Lang_
VM_JUMP L65
VM_LABEL L63
; ELSE
VM_PUSH USINT EF TimeIntervalCheckLangTimezone
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT EF TimeIntervalCheckLangTimezone
; END_IF
VM_LABEL L65
VM_RTS

; Lang_UP()
VM_FUNCTION _Lang_UP_
VM_DATA 0
; IF
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 27
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_CMP_GE DINT
VM_JZ L67
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X GeneralMng.ID_Lang
VM_JUMP L68
VM_LABEL L67
; ELSE
VM_PUSH DINT X GeneralMng.ID_Lang
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X GeneralMng.ID_Lang
; END_IF
VM_LABEL L68
VM_PUSH DINT X GeneralMng.ID_Lang
VM_SYSTEM 31
VM_POP_AWAY DINT
VM_RTS

; ScrollAlarm_DOWN()
VM_FUNCTION _ScrollAlarm_DOWN_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L71
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L71
VM_JZ L70
; THEN
EF_NEXT_MASK
VM_LABEL L70
; END_IF
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L73
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L73
VM_JZ L72
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L75
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LT DINT
VM_LABEL L75
VM_JZ L74
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmIdx
VM_JUMP L76
VM_LABEL L74
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_GE DINT
VM_JZ L77
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_NEXT_MASK
VM_LABEL L77
; END_IF
VM_LABEL L76
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L78
VM_LABEL L72
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L79
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L79
; END_IF
VM_LABEL L78
VM_RTS

; ScrollAlarm_UP()
VM_FUNCTION _ScrollAlarm_UP_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L80
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L82
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LE DINT
VM_LABEL L82
VM_JZ L81
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmIdx
VM_JUMP L83
VM_LABEL L81
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L84
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L85
VM_LABEL L84
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L87
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L87
VM_JZ L86
; THEN
VM_PUSH DINT X N_Alrms
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L86
; END_IF
VM_LABEL L85
VM_LABEL L83
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X AlarmMng.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L88
VM_LABEL L80
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L89
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L89
; END_IF
VM_LABEL L88
VM_RTS

; ResetSingleAlarm()
VM_FUNCTION _ResetSingleAlarm_
VM_DATA 0
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JNZ L91
VM_POP_AWAY BOOL
VM_PUSH BOOL EF EnCheckAlarm
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_LABEL L91
VM_JZ L90
; THEN
VM_JSR _CheckActiveAlarm_
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_LABEL L90
; END_IF
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L92
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF KeyAlarmAutorepeatActive
VM_JUMP L93
VM_LABEL L92
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_DUP BOOL
VM_JZ L95
VM_POP_AWAY BOOL
VM_PUSH BOOL EF KeyAlarmAutorepeatActive
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_LABEL L95
VM_JZ L94
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF KeyAlarmAutorepeatActive
VM_PUSH DINT X AlrmIdx
VM_SYSTEM 37
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L94
; END_IF
VM_LABEL L93
VM_RTS

; ResetGlobalAlarm()
VM_FUNCTION _ResetGlobalAlarm_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L96
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X AlarmMng.AlrmResByPGD1
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L96
; END_IF
VM_RTS

; CheckStoredVar_Log()
VM_FUNCTION _CheckStoredVar_Log_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL EF AlrmStoredVarReal1
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L98
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar1_REAL
VM_JUMP L99
VM_LABEL L98
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar1_REAL
; END_IF
VM_LABEL L99
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL EF AlrmStoredVarReal2
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L101
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnStoredVar2_REAL
VM_JUMP L102
VM_LABEL L101
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnStoredVar2_REAL
; END_IF
VM_LABEL L102
VM_RTS

; gotoAlarmLog()
VM_FUNCTION _gotoAlarmLog_
VM_DATA 0
VM_SYSTEM 39
VM_POP DINT EF AlrmLogsTot
; IF
VM_PUSH DINT EF AlrmLogsTot
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L97
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF infoLogOk
VM_JSR _CheckStoredVar_Log_
VM_JUMP L104
VM_LABEL L97
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmLogsIdx
VM_PUSH_IMM DINT -1
VM_POP DINT EF infoLogOk
; END_IF
VM_LABEL L104
; IF
VM_PUSH DINT EF infoLogOk
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L106
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF LastValidRecord
EF_GOTO_MASK Alrms_Log
VM_JUMP L107
VM_LABEL L106
; ELSE
EF_GOTO_MASK Alrms_NoLog
; END_IF
VM_LABEL L107
VM_RTS

; ScrollAlarmLog_UP()
VM_FUNCTION _ScrollAlarmLog_UP_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L109
; THEN
EF_BEEP
VM_JUMP L110
VM_LABEL L109
; ELSE
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
; END_IF
VM_LABEL L110
VM_RTS

; ScrollAlarmLog_DOWN()
VM_FUNCTION _ScrollAlarmLog_DOWN_
VM_DATA 0
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_AMP DINT EF AlrmLogCodeTemp
VM_PUSH_AMP USINT EF AlrmLogEventTypeTemp
VM_PUSH_AMP DINT EF AlrmLogTimeTemp
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
; IF
VM_PUSH DINT EF AlrmLogInfoErr
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L112
; THEN
EF_BEEP
VM_JUMP L113
VM_LABEL L112
; ELSE
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 64
VM_CMP_LT DINT
VM_JZ L115
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X AlarmMng.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
VM_JUMP L116
VM_LABEL L115
; ELSE
VM_PUSH_IMM DINT 64
VM_POP DINT X AlrmLogsIdx
EF_BEEP
; END_IF
VM_LABEL L116
; END_IF
VM_LABEL L113
VM_RTS

; DeleteAlarmLog()
VM_FUNCTION _DeleteAlarmLog_
VM_DATA 0
; IF
VM_PUSH BOOL X AlrmLogDelete
VM_PUSH_IMM BOOL 1
VM_CMP_EQ BOOL
VM_JZ L118
; THEN
VM_SYSTEM 43
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL X AlrmLogDelete
VM_PUSH_IMM BOOL 0
VM_POP BOOL X AlarmLogReset
VM_LABEL L118
; END_IF
EF_NEXT_FIELD
VM_RTS

; QuickMenuUP()
VM_FUNCTION _QuickMenuUP_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_JZ L119
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_JUMP L120
VM_LABEL L119
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L120
VM_RTS

; QuickMenuDOWN()
VM_FUNCTION _QuickMenuDOWN_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_CMP_LT INT
VM_JZ L122
; THEN
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT EF IdxQM
VM_JUMP L123
VM_LABEL L122
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L123
VM_RTS

; QuickMenuENT()
VM_FUNCTION _QuickMenuENT_
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
; CASE
VM_PUSH INT EF IdxQM
; OF
VM_CASE INT 1 L126
VM_CASE INT 2 L127
VM_CASE INT 3 L128
VM_POP_AWAY INT
VM_JUMP L125
VM_LABEL L126
EF_GOTO_MASK OnOff
VM_JUMP L125
VM_LABEL L127
EF_GOTO_MASK Set
VM_JUMP L125
VM_LABEL L128
EF_GOTO_MASK ChillInfo_1
VM_LABEL L125
VM_RTS

; GotoMainMenu()
VM_FUNCTION _GotoMainMenu_
VM_DATA 0
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH BOOL X EnLogOut
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L129
; THEN
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
; IF
VM_PUSH BOOL X BrowserAuth.DisableUI_Pwd
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L130
; THEN
EF_GOTO_MASK Pwd_LogIn
VM_JUMP L131
VM_LABEL L130
; ELSE
EF_GOTO_MASK WebPagesSessionActive
; END_IF
VM_LABEL L131
VM_JUMP L133
VM_LABEL L129
; ELSE
EF_GOTO_MASK Menu_Main
; END_IF
VM_LABEL L133
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
VM_RTS

; SelMainMenu()
VM_FUNCTION _SelMainMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L136
VM_CASE INT 2 L137
VM_CASE INT 3 L138
VM_CASE INT 4 L139
VM_CASE INT 5 L140
VM_CASE INT 6 L141
VM_CASE INT 7 L142
VM_POP_AWAY INT
VM_JUMP L135
VM_LABEL L136
EF_GOTO_MASK Plant
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L135
VM_LABEL L137
EF_GOTO_MASK Rotat
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_PUSH_IMM DINT 0
VM_POP DINT X CurrentRow
VM_PUSH_IMM DINT 0
VM_POP DINT X RowNumber
VM_JUMP L135
VM_LABEL L138
EF_GOTO_MASK Regulation_1
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L135
VM_LABEL L139
VM_PUSH_IMM DINT 0
VM_POP DINT X old_PageControl
VM_PUSH_IMM DINT 1
VM_POP DINT X PageControl
EF_GOTO_MASK Control_1
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L135
VM_LABEL L140
VM_JSR _gotoAlarmLog_
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_JUMP L135
VM_LABEL L141
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_PUSH INT X IdxMenuMsk
VM_POP INT EF IdxMenuMskTmp
VM_PUSH INT X BarPos
VM_POP INT EF BarPosTmp
VM_PUSH INT X CurrItemNo
VM_POP INT EF CurrItemNoTmp
VM_PUSH INT X IdxImg1
VM_POP INT EF IdxImg1Tmp
VM_PUSH INT X IdxImg2
VM_POP INT EF IdxImg2Tmp
VM_PUSH INT X IdxImg3
VM_POP INT EF IdxImg3Tmp
VM_PUSH INT EF SETTINGS_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Settings
VM_JUMP L135
VM_LABEL L142
EF_GOTO_MASK Pwd_LogOut
VM_PUSH_IMM INT 2
VM_POP INT EF MaskPos
VM_LABEL L135
VM_RTS

; SelSettingsMenu()
VM_FUNCTION _SelSettingsMenu_
VM_DATA 0
; CASE
VM_PUSH INT X CurrItemNo
; OF
VM_CASE INT 1 L144
VM_CASE INT 2 L145
VM_CASE INT 3 L146
VM_POP_AWAY INT
VM_JUMP L143
VM_LABEL L144
EF_GOTO_MASK DateTimeChg
VM_PUSH UINT X GeneralMng.Second
VM_POP UINT X GeneralMng.SecondIn
VM_PUSH UINT X GeneralMng.Minute
VM_POP UINT X GeneralMng.MinuteIn
VM_PUSH UINT X GeneralMng.Hour
VM_POP UINT X GeneralMng.HourIn
VM_PUSH UINT X GeneralMng.Day
VM_POP UINT X GeneralMng.DayIn
VM_PUSH UINT X GeneralMng.Month
VM_POP UINT X GeneralMng.MonthIn
VM_PUSH UINT X GeneralMng.Year
VM_POP UINT X GeneralMng.YearIn
VM_JUMP L143
VM_LABEL L145
EF_GOTO_MASK PwdChg
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_JUMP L143
VM_LABEL L146
EF_GOTO_MASK AlrmInit
VM_LABEL L143
VM_PUSH_IMM INT 4
VM_POP INT EF MaskPos
VM_RTS

; RetMainLoop()
VM_FUNCTION _RetMainLoop_
VM_DATA 0
VM_PUSH INT EF IdxMenuMskTmp
VM_POP INT X IdxMenuMsk
VM_PUSH INT EF BarPosTmp
VM_POP INT X BarPos
VM_PUSH INT EF MAIN_MENU_ITEMS_NO
VM_POP INT X MenuItemsNo
VM_PUSH INT EF CurrItemNoTmp
VM_POP INT X CurrItemNo
VM_PUSH INT EF IdxImg1Tmp
VM_POP INT X IdxImg1
VM_PUSH INT EF IdxImg2Tmp
VM_POP INT X IdxImg2
VM_PUSH INT EF IdxImg3Tmp
VM_POP INT X IdxImg3
EF_GOTO_MASK Menu_Main
VM_RTS

; RetSettingsLoop()
VM_FUNCTION _RetSettingsLoop_
VM_DATA 0
EF_GOTO_MASK Settings
VM_RTS

; GlobalEsc()
VM_FUNCTION _GlobalEsc_
VM_DATA 0
; CASE
VM_PUSH INT EF MaskPos
; OF
VM_CASE INT 0 L148
VM_CASE INT 1 L149
VM_CASE INT 2 L150
VM_CASE INT 3 L151
VM_CASE INT 4 L152
VM_POP_AWAY INT
VM_JUMP L147
VM_LABEL L148
VM_JSR _GotoMain_
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_JUMP L147
VM_LABEL L149
VM_JSR _GotoMain_
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_JUMP L147
VM_LABEL L150
EF_GOTO_MASK Menu_Main
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_JUMP L147
VM_LABEL L151
VM_JSR _RetMainLoop_
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
VM_JUMP L147
VM_LABEL L152
VM_JSR _RetSettingsLoop_
VM_PUSH_IMM INT 3
VM_POP INT EF MaskPos
VM_LABEL L147
VM_RTS

; ScrollMenuDown()
VM_FUNCTION _ScrollMenuDown_
VM_DATA 0
VM_PUSH INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X CurrItemNo
; IF
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_CMP_GT INT
VM_JZ L153
; THEN
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L154
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_JUMP L155
VM_LABEL L154
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L156
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X BarPos
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg3
VM_JUMP L157
VM_LABEL L156
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_JZ L158
; THEN
; IF
VM_PUSH INT X IdxMenuMsk
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 3
VM_SUB INT
VM_CMP_LT INT
VM_JZ L159
; THEN
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxMenuMsk
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 2
VM_ADD INT
VM_POP INT X IdxImg3
VM_JUMP L160
VM_LABEL L159
; ELSE
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
; END_IF
VM_LABEL L160
VM_LABEL L158
; END_IF
VM_LABEL L157
VM_LABEL L155
VM_JUMP L162
VM_LABEL L153
; ELSE
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L164
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_JUMP L165
VM_LABEL L164
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L166
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_LABEL L166
; END_IF
VM_LABEL L165
; END_IF
VM_LABEL L162
VM_RTS

; ScrollMenuUp()
VM_FUNCTION _ScrollMenuUp_
VM_DATA 0
VM_PUSH INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X CurrItemNo
; IF
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_CMP_GT INT
VM_JZ L167
; THEN
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L168
; THEN
; IF
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L169
; THEN
VM_PUSH INT X IdxMenuMsk
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxMenuMsk
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 2
VM_SUB INT
VM_POP INT X IdxImg3
VM_JUMP L170
VM_LABEL L169
; ELSE
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 3
VM_SUB INT
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 2
VM_POP INT X BarPos
VM_PUSH INT X MenuItemsNo
VM_POP INT X CurrItemNo
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 6
VM_SUB INT
VM_POP INT X IdxImg1
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 4
VM_SUB INT
VM_POP INT X IdxImg2
VM_PUSH INT X MenuItemsNo
VM_PUSH_IMM INT 2
VM_MUL INT
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg3
; END_IF
VM_LABEL L170
VM_JUMP L172
VM_LABEL L168
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L173
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_JUMP L174
VM_LABEL L173
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_JZ L175
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg2
VM_PUSH INT X IdxImg3
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg3
VM_LABEL L175
; END_IF
VM_LABEL L174
VM_LABEL L172
VM_JUMP L176
VM_LABEL L167
; ELSE
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 0
VM_CMP_EQ INT
VM_JZ L178
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X BarPos
VM_PUSH INT X MenuItemsNo
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 0
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 3
VM_POP INT X IdxImg2
VM_JUMP L179
VM_LABEL L178
; IF
VM_PUSH INT X BarPos
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_JZ L180
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH INT X IdxImg1
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImg1
VM_PUSH INT X IdxImg2
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImg2
VM_LABEL L180
; END_IF
VM_LABEL L179
; END_IF
VM_LABEL L176
VM_RTS

; PwdLogIn()
VM_FUNCTION _PwdLogIn_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
EF_DIGIT_RIGHT
; IF
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_EQ INT
VM_JZ L181
; THEN
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X PwdUser
VM_CMP_EQ UINT
VM_JZ L182
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_JUMP L183
VM_LABEL L182
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X PwdService
VM_CMP_EQ UINT
VM_JZ L184
; THEN
VM_PUSH_IMM INT 2
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_JUMP L185
VM_LABEL L184
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X RESERVED1
VM_CMP_EQ UINT
VM_JZ L186
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_JUMP L187
VM_LABEL L186
; IF
VM_PUSH UINT X PwdIn
VM_PUSH UINT X GeneralMng.RESERVED2
VM_CMP_EQ UINT
VM_JZ L188
; THEN
VM_PUSH_IMM INT 3
VM_POP INT X PwdTyp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnLogOut
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgU
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgS
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnPwdChgM
VM_PUSH_IMM INT 1
VM_POP INT EF MaskPos
EF_GOTO_MASK Menu_Main
VM_JUMP L189
VM_LABEL L188
; ELSE
VM_PUSH_IMM UDINT 0
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_PUSH_IMM INT 1
VM_POP INT X PwdRes
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
; END_IF
VM_LABEL L189
VM_LABEL L187
VM_LABEL L185
VM_LABEL L183
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_LABEL L181
; END_IF
VM_PUSH_IMM INT 5
VM_POP INT EF CntDwnPwdTypMenu
VM_RTS

; PwdLogOut()
VM_FUNCTION _PwdLogOut_
VM_DATA 0
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnLogOut
VM_PUSH_IMM INT 0
VM_POP INT X PwdTyp
VM_PUSH_IMM UINT 0
VM_POP UINT X PwdIn
VM_PUSH_IMM INT 0
VM_POP INT X PwdRes
VM_PUSH INT X PwdTyp
VM_POP INT X PwdTypMenu
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM INT 0
VM_POP INT X IdxMenuMsk
VM_PUSH_IMM INT 0
VM_POP INT X BarPos
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
EF_GOTO_MASK Main
VM_RTS

; ChgPwd()
VM_FUNCTION _ChgPwd_
VM_DATA 0
EF_COMPARE
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IncrTmp
; IF
VM_PUSH INT EF IncrTmp
VM_PUSH_IMM INT 4
VM_CMP_GE INT
VM_JZ L191
; THEN
EF_NEXT_FIELD
VM_PUSH_IMM INT 0
VM_POP INT EF IncrTmp
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.WritePwd
VM_JUMP L192
VM_LABEL L191
; ELSE
EF_DIGIT_RIGHT
; END_IF
VM_LABEL L192
VM_RTS

; DummyService()
VM_FUNCTION _DummyService_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_DUP BOOL
VM_JNZ L195
VM_POP_AWAY BOOL
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_LABEL L195
VM_JZ L194
; THEN
EF_NEXT_FIELD
VM_JUMP L196
VM_LABEL L194
; ELSE
EF_STORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK InsertService
; END_IF
VM_LABEL L196
VM_RTS

; DummyManuf()
VM_FUNCTION _DummyManuf_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_JZ L198
; THEN
EF_NEXT_FIELD
VM_JUMP L199
VM_LABEL L198
; ELSE
EF_STORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK InsertManuf
; END_IF
VM_LABEL L199
VM_RTS

; EscDummyService()
VM_FUNCTION _EscDummyService_
VM_DATA 0
EF_RESTORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_RTS

; EscDummyManuf()
VM_FUNCTION _EscDummyManuf_
VM_DATA 0
EF_RESTORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_RTS

; IncrDig()
VM_FUNCTION _IncrDig_
VM_DATA 0
EF_INCR_DIGIT
VM_RTS

; DecrDig()
VM_FUNCTION _DecrDig_
VM_DATA 0
EF_DECR_DIGIT
VM_RTS

; EnDateChg()
VM_FUNCTION _EnDateChg_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X GeneralMng.En_Date
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; DFUp()
VM_FUNCTION _DFUp_
VM_DATA 0
VM_JSR _Increment_WORD_
EF_COMPARE
VM_RTS

; DFDown()
VM_FUNCTION _DFDown_
VM_DATA 0
VM_JSR _Decrement_WORD_
EF_COMPARE
VM_RTS

; OnOffSwitch()
VM_FUNCTION _OnOffSwitch_
VM_DATA 0
VM_PUSH BOOL X OnOffUnitMng.KeybOnOff
VM_NOT BOOL
VM_POP BOOL X OnOffUnitMng.KeybOnOff
VM_RTS

; DoNothing()
VM_FUNCTION _DoNothing_
VM_DATA 0
VM_RTS

; IPCFG_Reboot_ESC()
VM_FUNCTION _IPCFG_Reboot_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X IPCfgMng.GenNetCfg.ResetTimerInactivity
VM_PUSH_IMM BOOL 0
VM_POP BOOL X IPCfgMng.GenNetCfg.ShowErr
EF_GOTO_MASK Main
VM_RTS

; IPCFG_Reboot_ENTER()
VM_FUNCTION _IPCFG_Reboot_ENTER_
VM_DATA 0
EF_COMPARE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X IPCfgMng.GenNetCfg.ResetTimerInactivity
; IF
VM_PUSH INT X IPCfgMng.GenNetCfg.EnReboot
VM_PUSH_IMM INT 1
VM_CMP_NE INT
VM_JZ L201
; THEN
EF_GOTO_MASK Main
VM_JUMP L202
VM_LABEL L201
; ELSE
EF_GOTO_MASK RebootingIPCfg
; END_IF
VM_LABEL L202
VM_RTS

; IPCFG_Err_ESC()
VM_FUNCTION _IPCFG_Err_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X IPCfgMng.GenNetCfg.ResetTimerInactivity
VM_PUSH_IMM DINT 150
VM_POP DINT X IPCfgMng.GenNetCfg.SysErr
EF_GOTO_MASK EnRebootIPCfg
VM_RTS

; IPCFG_Settings_ESC()
VM_FUNCTION _IPCFG_Settings_ESC_
VM_DATA 0
EF_GOTO_MASK Main
VM_PUSH_IMM BOOL 1
VM_POP BOOL X IPCfgMng.GenNetCfg.ResetTimerInactivity
VM_RTS

; Down_InfoPage()
VM_FUNCTION _Down_InfoPage_
VM_DATA 0
; IF
VM_PUSH DINT X Mask_Mng.Info_Page
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L204
; THEN
VM_PUSH BYTE X TotalChill
VM_CAST BYTE DINT
VM_POP DINT X Mask_Mng.Info_Page
VM_JUMP L205
VM_LABEL L204
; ELSE
VM_PUSH DINT X Mask_Mng.Info_Page
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Mask_Mng.Info_Page
; END_IF
VM_LABEL L205
VM_RTS

; Up_InfoPage()
VM_FUNCTION _Up_InfoPage_
VM_DATA 0
; IF
VM_PUSH DINT X Mask_Mng.Info_Page
VM_PUSH BYTE X TotalChill
VM_CAST BYTE DINT
VM_CMP_EQ DINT
VM_JZ L207
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X Mask_Mng.Info_Page
VM_JUMP L208
VM_LABEL L207
; ELSE
VM_PUSH DINT X Mask_Mng.Info_Page
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Mask_Mng.Info_Page
; END_IF
VM_LABEL L208
VM_RTS

; EscInfo()
VM_FUNCTION _EscInfo_
VM_DATA 0
VM_PUSH_IMM DINT 1
VM_POP DINT X Mask_Mng.Info_Page
VM_JSR _GotoMain_
VM_PUSH_IMM INT 0
VM_POP INT EF MaskPos
VM_RTS

; RowDown()
VM_FUNCTION _RowDown_
VM_DATA 0
; IF
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L210
; THEN
EF_NEXT_MASK
VM_JUMP L211
VM_LABEL L210
; ELSE
; IF
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 4
VM_CMP_NE DINT
VM_JZ L213
; THEN
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X RowNumber
VM_JUMP L214
VM_LABEL L213
; IF
VM_PUSH DINT X CurrentRow
VM_PUSH_IMM DINT 84
VM_CMP_NE DINT
VM_JZ L215
; THEN
VM_PUSH DINT X CurrentRow
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X CurrentRow
VM_JUMP L216
VM_LABEL L215
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X CurrentRow
VM_PUSH_IMM DINT 1
VM_POP DINT X RowNumber
; END_IF
VM_LABEL L216
VM_LABEL L214
; END_IF
VM_LABEL L211
VM_RTS

; RowUp()
VM_FUNCTION _RowUp_
VM_DATA 0
; IF
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L218
; THEN
EF_PREVIOUS_MASK
VM_JUMP L219
VM_LABEL L218
; ELSE
; IF
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_JZ L221
; THEN
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X RowNumber
VM_JUMP L222
VM_LABEL L221
; IF
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L224
VM_POP_AWAY BOOL
VM_PUSH DINT X CurrentRow
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L224
VM_JZ L223
; THEN
VM_PUSH DINT X CurrentRow
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurrentRow
VM_JUMP L225
VM_LABEL L223
; ELSE
VM_PUSH_IMM DINT 84
VM_POP DINT X CurrentRow
VM_PUSH_IMM DINT 4
VM_POP DINT X RowNumber
; END_IF
VM_LABEL L225
VM_LABEL L222
; END_IF
VM_LABEL L219
VM_RTS

; RowEdit()
VM_FUNCTION _RowEdit_
VM_DATA 0
; IF
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 2
VM_CMP_EQ INT
VM_DUP BOOL
VM_JNZ L228
VM_POP_AWAY BOOL
VM_PUSH INT X PwdTyp
VM_PUSH_IMM INT 3
VM_CMP_EQ INT
VM_LABEL L228
VM_JZ L227
; THEN
; IF
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L229
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X RowNumber
VM_JUMP L230
VM_LABEL L229
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X CurrentRow
VM_PUSH_IMM DINT 0
VM_POP DINT X RowNumber
; END_IF
VM_LABEL L230
VM_JUMP L232
VM_LABEL L227
; ELSE
EF_STORE_MASK
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK InsertService
; END_IF
VM_LABEL L232
VM_RTS

; RowSwap()
VM_FUNCTION _RowSwap_
VM_DATA 0
; IF
VM_PUSH DINT X RowNumber
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L234
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EditRow
VM_LABEL L234
; END_IF
VM_RTS

; Control_Down()
VM_FUNCTION _Control_Down_
VM_DATA 0
; IF
VM_PUSH DINT X PageControl
VM_PUSH BYTE X TotalChill
VM_CAST BYTE DINT
VM_CMP_LT DINT
VM_JZ L235
; THEN
VM_PUSH DINT X PageControl
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X PageControl
VM_JUMP L236
VM_LABEL L235
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X PageControl
; END_IF
VM_LABEL L236
VM_RTS

; Control_Up()
VM_FUNCTION _Control_Up_
VM_DATA 0
; IF
VM_PUSH DINT X PageControl
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_JZ L238
; THEN
VM_PUSH DINT X PageControl
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X PageControl
VM_JUMP L239
VM_LABEL L238
; ELSE
VM_PUSH BYTE X TotalChill
VM_CAST BYTE DINT
VM_POP DINT X PageControl
; END_IF
VM_LABEL L239
VM_RTS

; ResetTO()
VM_FUNCTION _ResetTO_
VM_DATA 0
EF_GOTO_MASK ResetTO
VM_RTS

; SetCurrentValueReset()
VM_FUNCTION _SetCurrentValueReset_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Mask_Mng.ResetTO
EF_GOTO_MASK Control_1
VM_RTS

; GoToControl()
VM_FUNCTION _GoToControl_
VM_DATA 0
EF_GOTO_MASK Control_1
VM_RTS

; __INIT__()
VM_FUNCTION ___INIT___
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT X CurrItemNo
VM_PUSH_IMM INT 1
VM_POP INT X IdxImg1
VM_PUSH_IMM INT 2
VM_POP INT X IdxImg2
VM_PUSH_IMM INT 4
VM_POP INT X IdxImg3
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM INT 3
VM_POP INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 7
VM_POP INT EF MAIN_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_PUSH_IMM INT 3
VM_POP INT EF SETTINGS_MENU_ITEMS_NO
VM_RTS
